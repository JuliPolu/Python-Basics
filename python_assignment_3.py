# Task 1 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"""1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль."""

def func_divide(a,b):
    """
    Function divides first number by second
    """
    if b == 0:
        print('Делить на ноль нельзя!')
        return
    else:
        c = a / b
    return c

try:
    num_1 = float(input('Введите первое число: '))
    num_2 = float(input('Введите второе число: '))
except ValueError:
    print('Вы ввели не число')
    exit(1)

print(func_divide(num_1, num_2))

# Task 2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"""2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры
как именованные аргументы. Реализовать вывод данных о пользователе одной строкой."""

def get_names(**kwargs):
    """
    Function divides first number by second
    """
    name = kwargs['name']
    surname = kwargs['surname']
    year = kwargs['year']
    town = kwargs['town']
    email = kwargs['email']
    phone = kwargs['phone']

    print(f'{name} {surname}, {year} года рождения, из города {town}, email: {email}, телефон: {phone}')

get_names(name = input("Введите ваше имя: "),
       surname = input("Введите вашу фамилию: "),
       year = input("Введите год вашего рождения: "),
       town = input("Введите город вашего проживания: "),
       email = input("Введите ваш email: "),
       phone = input("Введите ваш телефон: ")
       )

#Task 3 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"""3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов."""

def my_func(a,b,c):
    my_list = [a, b, c]
    my_list.sort(reverse=True)
    result = sum(my_list[:2])
    return result

print(my_func(16, 3, 1))

# Task 4 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"""4. Программа принимает действительное положительное число x и целое отрицательное число y.
Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y).
При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
Второй — более сложная реализация без оператора **, предусматривающая использование цикла."""

def my_func_1(x: int, y: int) -> float:
    z = x**y
    return z

def my_func_2(x: int, y: int) -> float:
    if y > 0:
        return  print('неверные входные данные')
    if y == 0:
        return 1
    else:
        return 1/x*my_func_2(x,y+1)

print(my_func_1(500,-3))
print(my_func_2(500,-3))

# Task 5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"""5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, 
выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму 
этих чисел к полученной ранее сумме и после этого завершить программу."""

result = 0

def my_func_3(args):
    global result
    for el in args:
        result += el
    return result

exit_bool = False

while exit_bool is False:
    input_list = [int(x) for x in (input('Введите несколько цифр через пробелы: ')).split(" ")]
    print(f'Сума значений {my_func_3(input_list)}')
    input_exit = input('Продолжить? Введите: "да" или "нет" ')

    if input_exit == 'нет':
        exit_bool = True
    else:
        continue

# Task 6 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"""6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой.
Например, print(int_func(‘text’)) -> Text.
Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. 
Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
Необходимо использовать написанную ранее функцию int_func()"""

def int_func(txt):
    return txt.title()

print(int_func('text'))

int_func = lambda txt: txt.title()

input_string = 'this is my text'
string_list = input_string.split()
new_list = []
for el in string_list:
    new_list.append(int_func(el))

print(*new_list)

print(" ".join(new_list))